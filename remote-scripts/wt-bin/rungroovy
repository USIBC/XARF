#!/bin/bash
# D. Racine 20150123

. $HOME/WT-env

# RHEL6's curl is too old to support '-J', use an alternate:
export PATH=~/bin:$PATH LD_LIBRARY_PATH=~/lib64


# A webTA userID with access to Script Execution:
USR=script_exec_app_user

# DNS portion of webTA URLs:
TESTVIP=test_vipname.domain
PRODVIP=prod_vipname.domain


PRG=$(basename $0)
TMPBASE=/tmp/$PRG-pid$$

usage() { printf "
  Usage: $PRG [-i inputfile] script.groovy|- id [...]\n
  Logs into each specified WebTA app instance as '$USR' and executes
  script.groovy, with optional input, via the Script Execution screen.\n
  The output of each instance's script execution is written to files in the PWD
  with names of the form 'id-script-outN[.ext]', where 'script' is the basename
  of script.groovy.\n
  The content of each output file will be formatted per WebTA's interpretation
  of the output directives in script.groovy, e.g. HTML, CSV, or MSO document.\n
  Scripts automated via $PRG should not include interactive dialogs.
  When necessary, remove or comment out message invocations in the copy
  of script.groovy that will be fed to $PRG.\n
  To run a script fed to $PRG's standard input, use a '-' character
  in place of the 'script.groovy' parameter.\n\n"; exit 1; }

die() { echo "$PRG: $1, quitting" >&2; rm -rf $TMPBASE-*; exit 1; }

skip() { echo "$PRG: $1, skipping" >&2; }


[ $# -lt 2 ] && usage


if [ "x$1" == "x-i" ]; then
  shift
  [[ $1 =~ ^[-_./0-9a-zA-Z]{1,200}$ ]] && { IF="$1"; shift; } \
                                       || die "input filespec limited to {-_./alnum} chars"
  [ -f "$IF" ] && IF="$(readlink -f $IF)" || die "$IF not found or not a file"; fi


[[ $1 =~ ^[-_./0-9a-zA-Z]{1,200}$ ]] && { GF="$1"; shift; } \
                                     || die "groovy filespec limited to {-_./alnum} chars"
if [ "x$GF" == "x-" ]; then GS="$(cat)"
else [ -f "$GF" ] && GS="<$(readlink -f $GF)" || die "$GF not found or not a file"; fi


OWD=$PWD
XS=0 #gets changed if an operation fails
PASS="$(getpass $USR)" || die "getpass $USR failed"

LPD[0]="password=$PASS"
LPD[1]="username=$USR&redirect=/&loginButton=loginButton"


# function: log_into ID loginURL
log_into() {
  local M="" \
        LR="$(curl -k -m 20 -s -D ck --data-urlencode "${LPD[0]}" -d "${LPD[1]}" "$2")" \
          || { skip "$1 login POST failed"; return 1; }
  if [ "x$LR" == "x" ]; then return 0
  elif [[ "$LR" =~ 'UNAVAILABLE' ]]; then M="$1 app offline"
  elif [[ "$LR" =~ 'INVALID URL' ]]; then M="$1 invalid appid or url"
  elif [[ "$LR" =~ 'HTTP Status 404' ]]; then M="$1 app broken - 404"
  elif [[ "$LR" =~ 'password has expired' ]]; then M="$1 expired password"
  elif [[ "$LR" =~ 'Invalid authentication' ]]; then M="$1 bad password or userid"
  else M="$1 unknown login response"; fi; skip "$M"; return 1; }


# function: normalize_groovy_output ID
normalize_groovy_output() {
  local EX i n=1 OFB="$1-$(basename $GF .groovy)-out"
  for i in *; do
    [ "x$i" == "xck" ] && continue
    [ "x$i" == "xScriptExecution" ] && EX=".html" || EX="$(grep -o '\.[^.]*$' <<<"$i")"
    mv -f -- "$i" $OWD/${OFB}${n}${EX}; n=$((n+1)); done; }


# function: groovyexec ID
groovyexec() {
  local VIPNAME TARGET LOGIN_URL SE_URL SES VS
  [[ $1 =~ ^(6|14)[0-9]{2}$ ]] && VIPNAME=$TESTVIP \
                               || VIPNAME=$PRODVIP
  TARGET="https://$VIPNAME/$1"
  LOGIN_URL="$TARGET/Login"
  SE_URL="$TARGET/ScriptExecution"

  mkdir $TMPBASE-$1 && cd $TMPBASE-$1 || { skip "$TMPBASE-$1 creation failed"; return 1; }

  log_into $1 $LOGIN_URL || return 1

  SES="$(curl -k -m 15 -s -b ck "$SE_URL")" \
    || { skip "$1 SE screen GET failed"; return 1; }
  
  VS="$(grep -o 'javax.faces.ViewState"  *value="[A-Za-z0-9/+=]*"' <<<"$SES" |cut -d\" -f3)" \
    || { skip "$1 faces.ViewState extraction failed"; return 1; }

  curl -k -m 300 -s -b ck -OJ \
       -F 'dashboard_form=dashboard_form' \
       -F 'scriptSelect=' \
       -F 'ij_id133=;type=application/octet-stream' \
       -F "ij_id136=$GS" \
       -F "ij_id138=@$IF;type=application/octet-stream" \
       -F 'j_id141=Execute Current Script' \
       -F "javax.faces.ViewState=$VS" \
       "$SE_URL" || { skip "$1 SE POST failed"; return 1; }

  normalize_groovy_output $1; }


# main: groovyexec all ids concurrently
while [ "x$1" != "x" ]; do
  ID=$1; shift
  [[ $ID =~ ^[0-9]{3,4}$ ]] || { skip "bad appid '$ID'"; XS=1; continue; }
  groovyexec $ID || XS=1 & done

wait && cd $OWD && rm -rf $TMPBASE-* && exit $XS
