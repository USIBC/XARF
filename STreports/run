#!/bin/bash
# This is intended to be run Mon-Fri via cron while production StarTeam
# is online. See $XARF_HOME/STreports/conf for documentation.
# D. Racine 20160128

. /path/to/xarf/xarf-env

RPTBASE=$XARF_HOME/STreports

. $RPTBASE/conf

PRG=$(basename $0)
TMP=/tmp/$PRG-pid$$
OWD=$PWD
DATE=$(date '+%Y%m%d')
JARDIR=$RPTBASE/jars
OUTDIR=$RPTBASE/out/$DATE


[ $# -lt 1 ] && { printf "
  Extracts Java-based reports from StarTeam via SDB-provided jar files
  built with the StarTeam SDK.\n
  Each jar logs into production StarTeam as '$STUSR'.\n
  See $RPTBASE/conf for configuration, documentation,
  and password maintenance instructions.\n
  Report jar files must exist in $RPTBASE/jars/.\n
  Output is written to $RPTBASE/out/.\n
  Usage: ./$PRG rungroup [...] 2>&1 |tee ${PRG}log\n
  The rungroups specified as parameters determine which reports
  are extracted per their MAP definitions in $RPTBASE/conf\n\n"; exit 1; }


die() { echo "$PRG: $1, quitting" >&2; rm -rf $TMP; exit 1; }


# function member token list
# Returns true if token is a member of list, false otherwise
member() { for i in $2; do [[ $i =~ ^$1$ ]] && return 0; done; return 1; }


# function 2html raw_report_file
# Reads the specified raw_report_file, writes html to stdout.
# 'raw_report_file' is the plaintext output file produced by executing a report jarfile
2html() {
  echo "<!DOCTYPE html>"
  echo "<html><head><style type=\"text/css\">
  table {border:1px solid black;border-collapse:collapse;}
  td {border:1px solid black;border-collapse:collapse;padding:6pt;}
  </style></head><body><table>"
  while read L; do
    printf '<tr><td>%s</td></tr>' "$(sed 's|~|</td><td>|g'<<<"$L")"
    done <"$1"; echo '</table></body></html>'; }


STPW="$(openssl des3 -salt -d -in $XARF_HOME/ssl/gp -pass file:$XARF_HOME/ssl/privatekey.pem)" \
  || die "ST password extraction failed"

GROUPS2RUN="$*"

umask 0037
mkdir -p $OUTDIR $TMP || die "mkdir $OUTDIR $TMP failed"
cd $TMP || die "cd $TMP failed"
rm -f * || die "$TMP cleanup failed"

echo "### BEGIN $PRG $GROUPS2RUN : $(date)"

while read R; do
  G="$(cut -d: -f1 <<<"$R")"
  T="$(cut -d: -f2 <<<"$R")"
  J="$(cut -d: -f3 <<<"$R")"
  P="$(cut -d: -f4 <<<"$R")"
  if member $G "$GROUPS2RUN"; then
    echo "=== BEGIN '$T' $(date)"
    $JAVA_HOME/bin/java -Xms512m -Xmx1024m -jar $JARDIR/$J $STUSR $STPW $P
    2html * >$OUTDIR/$(tr ' ' '_' <<<"$T")-$(date '+%Y%m%d-%H%M').html
    echo "=== END '$T' $(date)"
  else
    echo "=== skipping '$T': rungroup '$G' is not a member of { $GROUPS2RUN }"; fi
  rm -f *
  done <<<"$MAP"

cd $OWD && rm -rf $TMP
echo "### END $PRG $GROUPS2RUN : $(date)"
